<!--Tic Tac Toe - Client Server-->
<!--Pagina della home-->
<!--Marco Balducci, Simone Ceccarelli, Daniele Broccoli, Fabio Fantini-->
<!--13/05/2025 - 4H-->

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe - Home</title>
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">

    <style>
        .center-flex {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .card-width {
            width: 30rem;
        }

        /* Font personalizzato */
        @font-face { 
            font-family: Delicious; 
            font-weight: bold; 
            src: url('/assets/Fonstars-4Bo0p.otf');
        }

        /* Sfondo con gradiente e icone che si muovono in diagonale */
        /* Funziona tramite 3 sfondi, uno Ã¨ per il colore e gli altri due per le immagini */
        body {
            font-family: Delicious;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            overflow: hidden;

            background-image:
                url('/assets/O.png'),
                url('/assets/X.png'),
                linear-gradient(90deg, rgba(0, 240, 236, 1) 0%, rgba(0, 191, 230, 1) 100%);
            background-repeat: repeat, repeat, no-repeat;
            background-size: 400px 400px, 400px 400px, auto auto;

            background-position: 0 0, 200px 200px, 0 0;
            animation: muovi-sfondo 10s linear infinite;

            opacity: 97%;
        }

        /* Animazione per il movimento delle icone */
        @keyframes muovi-sfondo {
            to {
                background-position: -400px -400px, -200px -200px, 0 0;
            }
        }
    </style>

</head>

<body>
    
    <!-- Carta principale al centro dello schermo -->
    <div class="center-flex container flex-column vh-100 ">

        <div class="center-flex card card-width border-2 border-black">
            <div class="center-flex card-body flex-column">
                <h5 class="card-title fs-1">Tic Tac Toe!</h5>
                <button id="play-button" type="button" class="btn btn-outline-warning fs-1 p-5 text-dark mt-4 border-4"
                    onclick="ConnectToServer()">PLAY!</button>
                <p id="status" class="card-text mt-4">Welcome</p>
            </div>
        </div>
    </div>
    

    <script>
        const endpoint = "/chiedi-partita";
        let redirectUrl = undefined;

        // Colori per le animazioni con lo sfondo
        const from1 = [0, 240, 236];
        const to1 = [0, 64, 240];
        const from2 = [0, 191, 230];
        const to2 = [0, 230, 181];

        // Funzione per l'aggiornamento graduale dello sfondo
        function animateGradient(fromColor1, toColor1, fromColor2, toColor2, duration = 1000, steps = 60) {
            let step = 0;
            const intervalTime = duration / steps;

            const interpolate = (start, end) => {
                return start.map((val, i) => end[i] - val);
            };

            const delta1 = interpolate(fromColor1, toColor1);
            const delta2 = interpolate(fromColor2, toColor2);

            // Cambio graduale dei colori
            const interval = setInterval(() => {
                const currentColor1 = fromColor1.map((val, i) =>
                    Math.round(val + delta1[i] * step / steps)
                );
                const currentColor2 = fromColor2.map((val, i) =>
                    Math.round(val + delta2[i] * step / steps)
                );

                document.body.style.backgroundImage = `
                    url('./assets/O.png'),
                    url('./assets/X.png'),
                    linear-gradient(90deg, rgb(${currentColor1.join(',')}) 0%, rgb(${currentColor2.join(',')}) 100%)
                `;

                step++;
                if (step > steps) clearInterval(interval);
            }, intervalTime);
        }

        // Metodo per l'interruzione del flusso di esecuzione
        function wait(seconds) {
            return new Promise(resolve => setTimeout(resolve, seconds * 1000));
        }

        function ConnectToServer() {
            animateGradient(from1, to1, from2, to2); // Animazione al click

            const status_text = document.getElementById('status');
            const play_button = document.getElementById('play-button');

            status_text.innerText = "Connecting to the server...";
            play_button.disabled = true;

            // Invio di constanti richieste al server, in attesa che si trovi un altro utente per giocare
            const tryConnect = new Promise(async function (resolve, reject) {
                let resp;
                do {
                    await wait(1);
                    resp = await fetch(endpoint, { redirect: 'manual' });
                } while (resp.status != 200)

                data = await resp.json();
                resolve(data['game']);
            });

            // Opponente trovato, redirect al gioco (tris.ejs)
            tryConnect.then((gameID) => {
                redirectUrl = '/games/' + gameID;

                status_text.innerText = "";
                play_button.disabled = false;
                goToGame();
            })
        }

        function goToGame() {
            if (redirectUrl !== undefined) {
                window.location.href = redirectUrl;
            }
        }

        addEventListener("load", async (event) => {
            let res = await fetch("/login");
        });
    </script>
    <script src="/bootstrap/js/bootstrap.bundle.min.js"></script>
</body>

</html>