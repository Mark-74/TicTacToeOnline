<!DOCTYPE html>
<html lang="en">

<head>
    <title>Tic Tac Toe - Game</title>
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">

    <style>
        .cell {
            width: 25%;
            height: 25vh;
            text-align: center;
            vertical-align: middle;
            cursor: pointer;
            justify-content: center;
            align-items: center;
            border: 2px solid black;
            display: flex;
            font-size: 2rem;
            background-color: white;
            color: black;
        }

        .cell:hover {
            background-color: #ffc107;
        }

        body {
            color: white;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            overflow: hidden;

            background-image:
                url('/assets/O.png'),
                url('/assets/X.png'),
                linear-gradient(90deg, rgba(0, 240, 236, 1) 0%, rgba(0, 191, 230, 1) 100%);
            background-repeat: repeat, repeat, no-repeat;
            background-size: 400px 400px, 400px 400px, auto auto;

            background-position: 0 0, 200px 200px, 0 0;
            animation: muovi-sfondo 10s linear infinite;

            opacity: 97%;
        }

        @keyframes muovi-sfondo {
            to {
                background-position: -400px -400px, -200px -200px, 0 0;
            }
        }

        .center {
            display: flex;
            justify-content: center;
        }
    </style>
</head>

<body class="center align-items-center flex-column vh-100">
    <div class="container text-center">
        <h2 class="mb-1 mt-1">Tic Tac Toe Game</h2>
        <h2 id="turn" class="mb-1 mt-1">...</h2>
        <div class="row center">
            <div class="col-4 cell" id="00" onclick="SendMove(0,0)"></div>
            <div class="col-4 cell" id="01" onclick="SendMove(0,1)"></div>
            <div class="col-4 cell" id="02" onclick="SendMove(0,2)"></div>
        </div>
        <div class="row center">
            <div class="col-4 cell" id="10" onclick="SendMove(1,0)"></div>
            <div class="col-4 cell" id="11" onclick="SendMove(1,1)"></div>
            <div class="col-4 cell" id="12" onclick="SendMove(1,2)"></div>
        </div>
        <div class="row center">
            <div class="col-4 cell" id="20" onclick="SendMove(2,0)"></div>
            <div class="col-4 cell" id="21" onclick="SendMove(2,1)"></div>
            <div class="col-4 cell" id="22" onclick="SendMove(2,2)"></div>
        </div>
    </div>

    <button id="quit-button" type="button" class="btn btn-outline-warning text-white fs-3 border-4 px-4 py-1 mt-1" onclick="Quit()" hidden>Quit</button>

    <script>
        const isPlayerOne = <%= isPlayerOne %>
        const playerID = <%= playerID %>
        const occupiedPos = [];
        const url = window.location.pathname;
        const id = parseInt(url.substring(url.lastIndexOf('/') + 1));

        let symbol = 'X';
        let opponentSymbol = 'O';

        // background colors
        const standard1 = [0, 240, 236];
        const standard2 = [0, 191, 230];
        const stalemate1 = [219, 219, 219];
        const stalemate2 = [97, 97, 97];
        const win1 = [255, 224, 66];
        const win2 = [145, 141, 25];
        const lose1 = [255, 66, 66];
        const lose2 = [112, 24, 24];

        if(!isPlayerOne)
        {
            symbol = 'O';
            opponentSymbol = 'X';

            retrieveMove();
            document.getElementById("turn").innerHTML = "NOT you turn..";
        }
        else
        {
            document.getElementById("turn").innerHTML = "Your Turn!";
        }

        function wait(seconds) {
            return new Promise(resolve => setTimeout(resolve, seconds * 1000));
        }

        function retrieveMove(){
            const getMove = new Promise(async function (resolve, reject) {
                let resp;
                do {
                    await wait(.25);
                    try{
                        resp = await fetch(`/chiedi-mossa/${id}`);
                        console.log(resp.status)
                    } catch(err){
                        // nothing
                    }
                } while (resp.status === 420)
                
                data = await resp.json();

                if (resp.status === 555){
                    data['case'] = 1;
                } else {
                    data['case'] = 0;
                }

                resolve(data)
            });

            getMove.then((data) => {
                console.log(`data: ${JSON.stringify(data)}`);
                document.getElementById(`${data['X']}${data['Y']}`).innerText = opponentSymbol;

                document.getElementById("turn").innerHTML = "Your Turn!";

                if (data['case'] === 1){
                    if (data['winner'] === 'stalemate'){
                        console.log('stalemate');
                        EndGame(standard1, stalemate1, standard2, stalemate2, "Stale.png", "Stale.png", "Stalemate");
                    } else if (data['winner'] === playerID) {
                        console.log('you win!');
                        EndGame(standard1, win1, standard2, win2, "Win.png", "Win.png", "You WON!");
                    } else {
                        console.log('you lose!');
                        EndGame(standard1, lose1, standard2, lose2, "Lose.png", "Lose.png", "You lost..");
                    }
                }
            })
        }

        function SendMove(row, col) {
            let data = { row, col };
            if (occupiedPos.includes(data)) {
                throw new Error("Mossa Invalida!");
                return;
            }

            fetch('/muovi/' + id + '?row=' + row + '&col=' + col)
            .then((response) => {
                console.log('Response:', response); 
                return response.json();
            })
            .then((data) => {
                if (!data) return;
                console.log(`data: ${JSON.stringify(data)}`);
                
                occupiedPos.push(data);
                if (data['valid'] === false)
                    alert(data['reason']);
                else
                    document.getElementById(`${row}${col}`).innerText = symbol;

                document.getElementById("turn").innerHTML = "NOT you turn..";

                if (data['winner'] !== undefined){
                    if (data['winner'] === 'stalemate'){
                        console.log('stalemate');
                        EndGame(standard1, stalemate1, standard2, stalemate2, "Stale.png", "Stale.png", "Stalemate");
                    } else if (data['winner'] === playerID) {
                        console.log('you win!');
                        EndGame(standard1, win1, standard2, win2, "Win.png", "Win.png", "You WON!");
                    } else {
                        console.log('you lose!');
                        EndGame(standard1, lose1, standard2, lose2, "Lose.png", "Lose.png", "You lost..");
                    }
                }
                
                retrieveMove();
            })
            .catch((error) => {
                console.error('Error:', error);
            });

        }

        function animateGradient(fromColor1, toColor1, fromColor2, toColor2, img1, img2, duration = 1000, steps = 60) {
                let step = 0;
                const intervalTime = duration / steps;

                const interpolate = (start, end) => {
                    return start.map((val, i) => end[i] - val);
                };

                const delta1 = interpolate(fromColor1, toColor1);
                const delta2 = interpolate(fromColor2, toColor2);

                const interval = setInterval(() => {
                    const currentColor1 = fromColor1.map((val, i) =>
                        Math.round(val + delta1[i] * step / steps)
                    );
                    const currentColor2 = fromColor2.map((val, i) =>
                        Math.round(val + delta2[i] * step / steps)
                    );

                    document.body.style.backgroundImage = `
                        url('/assets/${img1}'),
                        url('/assets/${img2}'),
                        linear-gradient(90deg, rgb(${currentColor1.join(',')}) 0%, rgb(${currentColor2.join(',')}) 100%)
                    `;

                    step++;
                    if (step > steps) clearInterval(interval);
                }, intervalTime);
            }

        function EndGame(fromColor1, toColor1, fromColor2, toColor2, img1, img2, msg)
        {
            animateGradient(fromColor1, toColor1, fromColor2, toColor2, img1, img2);
            document.getElementById("turn").innerHTML = msg;
            document.getElementById("quit-button").hidden = false;
        }

        function Quit() 
        {
            window.location.href = "/";
        }

    </script>
    <script src="/bootstrap/js/bootstrap.bundle.min.js"></script>
</body>

</html>